"""
In Query we define the endpoints and parameters required
"""
type Query {
  "This will return the playlists to be featured for all users"
  featuredPlaylists: [Playlist]!
  "return a playlist with id"
  playlist(id: ID!): Playlist
  # artists(artists_ids: ID!):[Artist]
  artist(id: ID!): Artist
}

"""
The Playlist Schema to define a collection of tracks for a specific activity
"""
type Playlist {
  id: ID!
  name: String!
  description: String!
  tracks: [Track!]!
}

type Artist {
  id: ID!
  name: String!
  popularity: Int
  genres: [String]
}

"""
The Track object
"""
type Track {
  id: ID!
  "The name of the track"
  name: String!
  "The track length in milliseconds."
  durationMs: Int!
  "Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown)"
  explicit: Boolean!
  "The URI for the track, usually a Spotify link."
  uri: String!
}

type Mutation {
  "Add one or more items to a user's playlist."
  addItemsToPlayList(
    input: AddItemsToPlayListInput!
  ): AddItemsToPlayListResponse!
}

input AddItemsToPlayListInput {
  "The ID of the playlist."
  playlistId: ID!
  "A comma-separated list of Spotify URIs to add."
  uris: [String!]!
}

type AddItemsToPlayListResponse {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Boolean Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The playlist that contains the newly added items"
  playlist: Playlist
}
